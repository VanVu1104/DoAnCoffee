@* @model IEnumerable<Manage_Coffee.Models.CartItem> *@
@model Manage_Coffee.Models.ViewModels.CartItemViewModel
@{
	ViewData["Title"] = "Checkout";
}


<div class="container-fluid py-5">
	<div class="container py-5">
		<h1 class="mb-4">Billing details</h1>
		<form asp-action="Checkout">
			<div class="row g-5">
				<form asp-action="Checkout" asp-controller="Cart">
					<div class="col-md-12 col-lg-6 col-xl-7">
						<div class="form-check my-3">
							<input type="checkbox" name="GiongKhachHang" class="form-check-input" id="GiongKhachHang" value="false">
							<label class="form-check-label" for="GiongKhachHang">Giống thông tin khách hàng?</label>
						</div>
						<div class="form-item delivery-info">
							<label class="form-label my-3">Người nhận hàng<sup>*</sup></label>
							<input type="text" name="HoTen" class="form-control">
						</div>
						<div class="form-item delivery-info">
							<label class="form-label my-3">Địa chỉ nhận hàng<sup>*</sup></label>
							<input type="text" name="DiaChi" class="form-control" placeholder="123 Lê Lợi, Quận 1">
						</div>
						<div class="form-item delivery-info">
							<label class="form-label my-3">Điện thoại<sup>*</sup></label>
							<input type="text" name="DienThoai" class="form-control">
						</div>
						<div class="form-item mt-3">
							<textarea name="GhiChu" class="form-control" spellcheck="false" cols="30" rows="11" placeholder="Ghi chú"></textarea>
						</div>
						<div class="form-item my-3">
							<label>Số xu hiện có: <span id="userPoints">@ViewBag.SoXu</span> xu</label>
						</div>
						<div class="form-item my-3">
							<label for="pointsInput">Nhập số xu muốn sử dụng:</label>
							<input type="number" id="pointsInput" name="SoXu" class="form-control" min="0" max="@ViewBag.SoXu" value="0">				
						</div>
						<form asp-action="Checkout" asp-controller="Cart">
						
							<input type="hidden" id="SelectedDiscount" name="MaKm" value="" />
							<input type="hidden" id="FinalTotal" name="totalValue" value="" />
							<input type="hidden" id="SelectedBranch" name="MaCn" value="" />
							<button type="submit" class="btn border-secondary text-uppercase text-primary w-100 mt-2">Đặt hàng</button>
							
						</form>
						<div id="paypal-button-container" class="form-item mt-3" style="max-width:1000px;"></div>

					</div>
				</form>
				<div class="col-md-12 col-lg-6 col-xl-5">
					<div class="table-responsive">
						<table class="table">
							<thead>
								<tr>
									<th scope="col">Products</th>
									<th scope="col">Name</th>
									<th scope="col">Price</th>
									<th scope="col">Quantity</th>
									<th scope="col">Total</th>
								</tr>
							</thead>
							<tbody>
								@foreach (var item in Model.CartItems)
								{
									<tr>
										@* <th scope="row">
									<div class="d-flex align-items-center mt-2">
									<img src="~/Hinh/HangHoa/@item.Hinh" class="img-fluid rounded-circle" style="width: 90px; height: 90px;" alt="@item.TenHH">
									</div>
									</th> *@
										<td class="py-5">@item.Ten</td>
										<td class="py-5">$@item.Dongia</td>
										<td class="py-5">@item.Soluong</td>
										<td class="py-5">@item.SizeID</td>
										<td class="py-5">@item.SizeName</td>
										<td class="py-5">@item.Ghichu</td>
										<td class="py-5">@item.Total</td>
									</tr>
									
								}
								
								<div>
									@* <h3>Danh sách giảm giá</h3> *@
									@* <select id="DiscountCode">
									<option value="">Chọn mã giảm giá</option>
									@foreach (var discount in Model.Discounts)
									{
									<option value="@discount.MaKm">@discount.Ten</option>
									}
									</select> *@

									<h3>Danh sách giảm giá</h3>
									<select id="DiscountCode">
										<option value="">Chọn mã giảm giá</option>
										@foreach (var discount in Model.Discounts)
										{
											// Chuyển đổi ngày hiện tại và ngày của mã khuyến mãi
											var currentDate = DateTime.Now;
											var ngayApDung = discount.Ngayapdung;
											var ngayHetHan = discount.Ngayhethan;

											// Chỉ hiển thị các mã có số lượng > 0 và còn trong khoảng thời gian hợp lệ
											if (discount.Soluong > 0 && ngayApDung <= currentDate && ngayHetHan >= currentDate)
											{
												<option value="@discount.MaKm">@discount.Ten - Áp dụng cho hoá đơn:@discount.Hanmuc</option>
											}
										}
									</select>



								</div>
								<div>
									<label for="MaCn">Chọn Chi Nhánh:</label>
									@await Component.InvokeAsync("ChiNhanh")
								</div>
								<tr>
									<th scope="row">
									</th>
									<td class="py-5"></td>
									<td class="py-5"></td>
									<td class="py-5">
										<p class="mb-0 text-dark py-3">Subtotal</p>
									</td>
									<td class="py-5">
										<div class="py-3 border-bottom border-top">
											<p class="mb-0 text-dark">$@Model.CartItems.Sum(p => p.Total).ToString("#,##0")</p>
										</div>
									</td>
								</tr>

								<p>Tổng giá sau giảm: <span id="totalValue">@Model.CartItems.Sum(p => p.Total).ToString("C")</span></p>
							</tbody>
						</table>
					</div>
					<div class="row g-4 text-center align-items-center justify-content-center border-bottom py-3">
						<div class="col-12">
							<div class="form-check text-start my-3">
								<input type="checkbox" class="form-check-input bg-primary border-0" id="Paypal-1" name="Paypal" value="Paypal">
								<label class="form-check-label" for="Paypal-1">Paypal</label>
							</div>
						</div>
					</div>
				</div>
			</div>
		</form>
	</div>
</div>
<!-- Checkout Page End -->
@section Scripts {
	<script src="https://www.paypal.com/sdk/js?client-id=@ViewBag.PaypalClientdId"></script>
	<script>
		var discounts = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(Model.Discounts));
	</script>
	<script>
		$(document).ready(function () {
			// Khi người dùng thay đổi mã giảm giá
			$("#DiscountCode").change(function () {
				var discountValue = $(this).val(); // Lấy giá trị từ dropdown
				$("#SelectedDiscount").val(discountValue);

				// Lấy tổng gốc
				var subtotal = @Model.CartItems.Sum(p => p.Total); // Tổng giá ban đầu
				var discounts = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(Model.Discounts)); // Chuyển đổi Discounts thành JSON
				var validDiscount = null; // Khởi tạo biến cho mã giảm giá hợp lệ

				// Kiểm tra mã giảm giá dựa trên hạn mức
				validDiscount = discounts.find(discount => {
					var hanMuc = discount.Hanmuc;
					return discount.MaKm === discountValue && subtotal >= hanMuc;
				});

				var currentTotal = subtotal;
				// Cập nhật tổng giá trị sau khi áp dụng giảm giá
				if (validDiscount) {
					var discountAmount = validDiscount.GiaTri; // Giả sử đây là phần trăm giảm giá
					currentTotal = subtotal - (subtotal * discountAmount / 100); // Tổng sau khi trừ giảm giá
				}

				// Trừ số xu nếu có
				updateTotalWithPoints(currentTotal);
			});

			// Khi người dùng nhập số xu
			$("#pointsInput").on("input", function () {
				var points = parseInt($(this).val()) || 0;
				var userPoints = parseInt($("#userPoints").text()) || 0;

				if (points > userPoints) {
					alert("Số xu không được vượt quá xu hiện có.");
					$(this).val(userPoints);
					points = userPoints;
				}

				// Lấy tổng gốc
				var subtotal = @Model.CartItems.Sum(p => p.Total);

				// Kiểm tra xem có mã giảm giá nào đang được chọn không
				var discountValue = $("#DiscountCode").val();
				var currentTotal = subtotal;

				// Nếu có mã giảm giá thì tính tổng tiền sau khi giảm giá
				if (discountValue) {
					var discounts = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(Model.Discounts)); // Chuyển đổi Discounts thành JSON
					var validDiscount = discounts.find(discount => discount.MaKm === discountValue);

					if (validDiscount) {
						var discountAmount = validDiscount.GiaTri; // Phần trăm giảm giá
						currentTotal = subtotal - (subtotal * discountAmount / 100); // Tổng sau khi giảm giá
					}
				}

				// Cập nhật tổng tiền sau khi trừ xu
				var newTotal = currentTotal - points;

				// Cập nhật lại hiển thị tổng tiền và giá trị ẩn
				$('#totalValue').text(newTotal.toFixed(2));
				$("#FinalTotal").val(newTotal.toFixed(2));
			});

			// Hàm để trừ số xu vào tổng tiền đã cập nhật
			function updateTotalWithPoints(currentTotal) {
				var points = parseInt($("#pointsInput").val()) || 0;
				var userPoints = parseInt($("#userPoints").text()) || 0;

				if (points > userPoints) {
					points = userPoints; // Đảm bảo số xu không vượt quá giới hạn
				}

				var newTotal = currentTotal - points; // Trừ số xu vào tổng đã cập nhật

				// Cập nhật lại hiển thị tổng tiền và giá trị ẩn
				$('#totalValue').text(newTotal.toFixed(2));
				$("#FinalTotal").val(newTotal.toFixed(2));
			}
		});

		$(document).ready(function () {
			$("#GiongKhachHang").change(function () {
				if ($(this).prop("checked")) {

					$("#HoTen").val("@Model.KhachHang?.Ten");
					$("#DiaChi").val("@Model.KhachHang?.Diachi");
					$("#DienThoai").val("@Model.KhachHang?.Sdt");
				} else {
					$("#HoTen").val("");
					$("#DiaChi").val("");
					$("#DienThoai").val("");
					// $(this).val(false);
					// $(".delivery-info").removeClass("d-none");
				}
			});
		});

		$(document).ready(function () {
			$("#BranchDropdown").change(function () {
				var selectedBranch = $(this).val(); // Lấy giá trị từ dropdown
				$("#SelectedBranch").val(selectedBranch); // Cập nhật hidden input
			});
		});
		// Cập nhật khi tạo đơn hàng
		paypal.Buttons({
			createOrder: (data, actions) => {

				var selectedDiscount = $("#SelectedDiscount").val() || ""; // Nếu null thì thành chuỗi rỗng
				var finalTotal = $("#FinalTotal").val() || "0";  // Lấy tổng giá trị sau giảm
				var selectedBranch = $("#SelectedBranch").val();
				var pointsInput = $("#pointsInput").val() || 0;
				return fetch("/Cart/create-paypal-order", {
					method: "post",
					headers: {
						'Content-Type': 'application/json' // Thêm header nếu cần
					},
					body: JSON.stringify({
						// Gửi mã giảm giá và tổng giá trị
						MaKm: selectedDiscount,
						totalValue: finalTotal,
						MaCn: selectedBranch,
						SoXu: pointsInput
					})
				}).then((response) => {
					if (!response.ok) {
						return response.json().then(error => { throw error; });
					}

					return response.json();
				}).then((order) => order.id)
					.catch(error => alert(error.message));
			},
			onApprove: (data, actions) => {
				var selectedDiscount = $("#SelectedDiscount").val() || ""; // Nếu null thì thành chuỗi rỗng
				var finalTotal = $("#FinalTotal").val() || "0";  // Lấy tổng giá trị sau giảm
				var selectedBranch = $("#SelectedBranch").val();
				var pointsInput = $("#pointsInput").val();
				//return fetch(`/Cart/capture-paypal-order?orderId=${data.orderID}`, {

				return fetch("/Cart/capture-paypal-order?orderId=${data.orderID}", {
					method: "post",
					headers: {
						'Content-Type': 'application/json' // Thêm header nếu cần
					},
					body: JSON.stringify({
						// Gửi mã giảm giá và tổng giá trị
						MaKm: selectedDiscount,
						totalValue: finalTotal,
						MaCn: selectedBranch,
						SoXu: pointsInput,
					})
				}).then((response) => {
					window.location.href = "/Cart/PaymentSuccess";
				}).catch(error => alert(error.message));
			}
		}).render('#paypal-button-container');

	</script>


}
<style>
	.invalid-discount {
		color: red; /* Màu chữ đỏ */
		background-color: #f8d7da; /* Nền màu hồng nhạt */
	}

	.valid-discount {
		color: green; /* Màu chữ xanh */
		background-color: #d4edda; /* Nền màu xanh nhạt */
	}

</style>
