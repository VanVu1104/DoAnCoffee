@* @using Manage_Coffee.Models.ViewModels
@model CartItemViewModel *@
@model Manage_Coffee.Models.ViewModels.CartItemViewModel
@{
	ViewData["Title"] = "Checkout";
}


<div class="container-fluid py-5">
	<div class="container py-5">
		<h1 class="mb-4">Billing details</h1>
		<form asp-action="Checkout">
			<div class="row g-5">
				<form asp-action="Checkout" asp-controller="Cart">
					<div class="col-md-12 col-lg-6 col-xl-7">
						<div class="form-check my-3">
							<input type="checkbox" name="GiongKhachHang" class="form-check-input" id="GiongKhachHang" value="false">
							<label class="form-check-label" for="GiongKhachHang">Giống thông tin khách hàng?</label>
						</div>
						<div class="form-item delivery-info">
							<label class="form-label my-3">Người nhận hàng<sup>*</sup></label>
							<input type="text" name="HoTen" class="form-control">
						</div>
						<div class="form-item delivery-info">
							<label class="form-label my-3">Địa chỉ nhận hàng<sup>*</sup></label>
							<input type="text" name="DiaChi" class="form-control" placeholder="123 Lê Lợi, Quận 1">
						</div>
						<div class="form-item delivery-info">
							<label class="form-label my-3">Điện thoại<sup>*</sup></label>
							<input type="text" name="DienThoai" class="form-control">
						</div>
						<div class="form-item mt-3">
							<textarea name="GhiChu" class="form-control" spellcheck="false" cols="30" rows="11" placeholder="Ghi chú"></textarea>
						</div>
						<button type="submit" class="btn border-secondary text-uppercase text-primary w-100 mt-2">Đặt hàng</button>
						<div id="paypal-button-container" class="form-item mt-3" style="max-width:1000px;"></div>
					</div>
				</form>
				<div class="col-md-12 col-lg-6 col-xl-5">
					<div class="table-responsive">
						<table class="table">
							<thead>
								<tr>
									<th scope="col">Products</th>
									<th scope="col">Name</th>
									<th scope="col">Price</th>
									<th scope="col">Quantity</th>
									<th scope="col">Total</th>
								</tr>
							</thead>
							<tbody>
								@foreach (var item in Model.CartItems)
								{
									<tr>
										 @* <th scope="row">
										 	<div class="d-flex align-items-center mt-2">
										 		<img src="~/Hinh/HangHoa/@item.Hinh" class="img-fluid rounded-circle" style="width: 90px; height: 90px;" alt="@item.TenHH">
										 	</div>
										 </th> *@
										<td class="py-5">@item.Ten</td>
										<td class="py-5">$@item.Dongia</td>
										<td class="py-5">@item.Soluong</td>
										<td class="py-5">@item.SizeID</td>
										<td class="py-5">@item.SizeName</td>
										<td class="py-5">@item.Ghichu</td>
										<td class="py-5">@item.Total</td>
									</tr>
								}
								<div>
									<label for="MaCn">Chọn Chi Nhánh:</label>
									@await Component.InvokeAsync("ChiNhanh")
								</div>
								<div>
									<h3>Danh sách giảm giá</h3>
									<select id="DiscountCode">
										<option value="MaKm">Chọn mã giảm giá</option>
										@foreach (var discount in Model.Discounts)
										{
											<option value="@discount.MaKm">@discount.Ten</option>
										}
									</select>

								</div>
								<tr>
									<th scope="row">
									</th>
									<td class="py-5"></td>
									<td class="py-5"></td>
									<td class="py-5">
										<p class="mb-0 text-dark py-3">Subtotal</p>
									</td>
									<td class="py-5">
										<div class="py-3 border-bottom border-top">
											<p class="mb-0 text-dark">$@Model.CartItems.Sum(p => p.Total).ToString("#,##0")</p>
										</div>
									</td>
								</tr>

								<p>Tổng giá sau giảm: <span id="totalValue">@Model.CartItems.Sum(p => p.Total).ToString("C")</span></p>

							</tbody>
						</table>
					</div>
					<div class="row g-4 text-center align-items-center justify-content-center border-bottom py-3">
						<div class="col-12">
							<div class="form-check text-start my-3">
								<input type="checkbox" class="form-check-input bg-primary border-0" id="Paypal-1" name="Paypal" value="Paypal">
								<label class="form-check-label" for="Paypal-1">Paypal</label>
							</div>
						</div>
					</div>
				
				</div>
			</div>
		</form>
	</div>
</div>
<!-- Checkout Page End -->
@section Scripts {
	<script src="https://www.paypal.com/sdk/js?client-id=@ViewBag.PaypalClientdId"></script>
	<script>
		var discounts = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(Model.Discounts));
	</script>
	<script>
		$(document).ready(function () {
			$("#DiscountCode").change(function () {
				var discountValue = $(this).val(); // Lấy giá trị từ dropdown
				$("#SelectedDiscount").val(discountValue);
				if (!discountValue) {
					alert("Vui lòng chọn một mã giảm giá.");
					return;
				}

				var subtotal = @Model.CartItems.Sum(p => p.Total); // Tổng giá ban đầu
				var discounts = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(Model.Discounts)); // Chuyển đổi Discounts thành JSON
				var validDiscount = null; // Khởi tạo biến cho mã giảm giá hợp lệ

				// Kiểm tra mã giảm giá
				validDiscount = discounts.find(discount => {
					var startDate = new Date(discount.Ngayapdung);
					var endDate = new Date(discount.Ngayhethan);
					var hanMuc = discount.Hanmuc;

					return discount.MaKm === discountValue && subtotal >= hanMuc && new Date() >= startDate && new Date() <= endDate;
				});

				// Cập nhật tổng giá trị sau khi áp dụng giảm giá
				if (!validDiscount) {
					alert("Mã giảm giá không hợp lệ hoặc không đủ điều kiện sử dụng.");
					$('#totalValue').text(subtotal.toFixed(2)); // Hiển thị tổng ban đầu
				} else {
					// Tính toán tổng tiền sau khi áp dụng giảm giá
					var discountAmount = validDiscount.GiaTri; // Giả sử đây là phần trăm giảm giá
					var newTotal = subtotal - (subtotal * discountAmount / 100);
					$('#totalValue').text(newTotal.toFixed(2));
					$("#FinalTotal").val(newTotal.toFixed(2)); // Cập nhật hiển thị tổng
				}

				// Tô màu cho các phiếu giảm giá không hợp lệ
				$('#DiscountCode option').each(function () {
					var optionValue = $(this).val();
					var isValid = discounts.some(discount => {
						var startDate = new Date(discount.Ngayapdung);
						var endDate = new Date(discount.Ngayhethan);
						var hanMuc = discount.Hanmuc;

						return optionValue === discount.MaKm && subtotal >= hanMuc && new Date() >= startDate && new Date() <= endDate;
					});

					$(this).toggleClass('invalid-discount', !isValid);
					$(this).toggleClass('valid-discount', isValid);
				});
			});
		});

		$(document).ready(function () {
			$("#GiongKhachHang").change(function () {
				if ($(this).prop("checked")) {
					$(this).val(true);
					$(".delivery-info").addClass("d-none");
				} else {
					$(this).val(false);
					$(".delivery-info").removeClass("d-none");
				}
			});
		});

		paypal.Buttons({
			style: {
				layout: 'vertical',
				color: 'silver',
				tagline: 'false'
			},
			createOrder: (data, actions) => {
				return fetch("/Cart/create-paypal-order", {
					method: "post",
				}).then((response) => {
					if (!response.ok) {
						return response.json().then(error => { throw "error"; });
					}
					return response.json();
				}).then((order) => {
					console.log(order); // Kiểm tra phản hồi
					return order.id;
				}).catch(error => {
					console.error("Lỗi tạo đơn hàng: ", error); // Log lỗi
					alert(error.message || "Có lỗi xảy ra trong quá trình tạo đơn hàng.");
				});
			},
			onApprove: (data, actions) => {
				console.log(data); // Kiểm tra giá trị data
				return fetch(`/Cart/capture-paypal-order?orderID=${data.orderID}`, {
					method: "post",
				}).then((response) => {
					if (!response.ok) {
						return response.json().then(error => { throw "error"; });
					}
					// Chuyển hướng đến trang thành công
					window.location.href = "/Cart/PaymentSuccess";
				});
			}
		}).render('#paypal-button-container');
	</script>

}
<style>
	.invalid-discount {
		color: red; /* Màu chữ đỏ */
		background-color: #f8d7da; /* Nền màu hồng nhạt */
	}

	.valid-discount {
		color: green; /* Màu chữ xanh */
		background-color: #d4edda; /* Nền màu xanh nhạt */
	}

</style>